Object-Orienting

-> Every* function, while executing, has a 'reference' to its current execution context called 'this'
-> Lexical Scope vs Dynamic Scope -> JS's version of 'dynamic scope' is -> 'this'
-> The only thing that matters is 'how' the function was 'called'

function foo() {
    console.log(this.bar);
} 

var bar = "bar1"; 
var o2 = { bar: "bar2", foo: foo }; 
var o3 = { bar: "bar3", foo: foo }; 
foo(); 
o2.foo(); 
o3.foo(); 
